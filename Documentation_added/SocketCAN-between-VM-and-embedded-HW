### VirtualCAN example on the REAL HW (Beaglebone-Black) using socketCAN framework

This time the use case is much more realistic, and closing to the true embedded Real-Time cases.

Please, read README.md to understand general cannelloni feature set.

Before setting the VirtualCAN testing of the virtual socketCAN framework

Two machines:1 (Debian VM) and 2 (Beaglebone-Black) need to be connected:
```
Debian VM with IP: 192.168.15.2 <<=== ETH/true MAC I/F ===>> Beaglebone-Black IP: 192.168.15.101
     virtual interface vcan0                                      virtual interface vcan0
```
Machine 2 (Beaglebone-Black with IP address: 192.168.15.101) will be connected to the virtual
CAN Bus that is attached to Machine 1 (Debian VM with IP address: 192.168.15.2).

This internal to VM and Beaglebone-Black is primarily used for Lava DUT BBB testing. But it also
plays a perfect environment/test bed for socketCAN and on the top of it, cannelloni user space app.

Please before continuing, the following should be done on the Debian VM:
apt-get install can-utils (so to save some environment setting and can-utils git cloning).

Prepare vcan on the Machine 1 (Debian VM with IP address: 192.168.15.2):
```
sudo modprobe vcan
sudo ip link add name vcan0 type vcan
sudo ip link set dev vcan0 up
```

Start canneloni on the Machine 1 (Debian VM with IP address: 192.168.15.2):
```
cannelloni -I vcan0 -R 192.168.15.101 -r 20000 -l 20000
```

Please, do note that vcan0 is the dedicated interface to the Machine 1, has
nothing to do with vcan0 of the Machine 2! Also, do note that the IP address
192.168.15.101 is the IP of the Beaglebone-Black HW (am3352 Sitara/OMAP3).

cannelloni will now listen on port 20000 and has Machine 2 configured as its remote.

Prepare vcan on Machine 2:
```
sudo modprobe vcan
sudo ip link add name vcan0 type vcan
sudo ip link set dev vcan0 up
```

When operating with `vcan` interfaces always keep in mind that they
easily surpass the possible data rate of any physical CAN interface.
An application that just sends whenever the bus is ready would simply
send with many Mbit/s.
The receiving end, a physical CAN interface with a net. data rate of
<= 1 Mbit/s would not be able to keep up.
It is therefore a good idea to rate limit a `vcan` interface to
prevent packet loss.
```
sudo tc qdisc add dev vcan0 root tbf rate 300kbit latency 100ms burst 1000
```

This command will rate limit `vcan0` to 300 kbit/s.
Try to match the rate limit with your physical interface on the remote.
Keep also in mind that this also increases the overall latency!

Now start cannelloni on Machine 2 (Beaglebone-Black HW (am3352 Sitara/OMAP3)):
```
cannelloni -I vcan0 -R 192.168.15.2 -r 20000 -l 20000
```

Please, do note that vcan0 is the dedicated interface to the Machine 2, has
nothing to do with vcan0 of the Machine 1! Also, do note that the IP address
192.168.15.2 is the IP of the Debian VM.

The tunnel is now complete and can be used on both machines.
Simply try it by using `candump` and/or `cangen`:

`candump` and `cangen` tools to be found here:
https://github.com/linux-can/can-utils

And also as debian can-utils.deb package!

Description how to use these tools to be found here:
http://sgframework.readthedocs.io/en/latest/cantutorial.html

If something does not work, try the debug switch `-d cut` to find out
what is wrong.
